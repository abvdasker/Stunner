<project name="Stunner" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
  <description>
    The build file for Stunner.
  </description>

  <!-- download ivy so that it can be used without installation -->
  <property name="ivy.install.version" value="2.4.0" />
  <property name="ivy.jar.dir" value="${basedir}/ivy" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy-${ivy.install.version}.jar" />

  <target name="check-ivy">
    <mkdir dir="${ivy.jar.dir}" />
    <pathconvert property="ivy-exists" setonempty="false" pathsep=" ">
      <path>
        <fileset dir="${ivy.jar.dir}" includes="ivy-2.*" />
      </path>
    </pathconvert>
  </target>

  <target name="dont-download-ivy" depends="check-ivy" if="ivy-exists" description="log ivy not downloaded">
    <echo>Ivy not downloaded, already exists</echo>
  </target>
  
  <target name="download-ivy" depends="dont-download-ivy" unless="ivy-exists" description="download ivy">
    <echo message="downloading ivy..." />
    <get src="http://central.maven.org/maven2/org/apache/ivy/ivy/2.4.0/ivy-2.4.0.jar" dest="${ivy.jar.file}" usetimestamp="true" />
  </target>

  <target name="install-ivy" depends="download-ivy" description="install ivy">
    <path id="ivy.lib.path">
      <fileset file="${ivy.jar.file}" />
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
  </target>

  <!-- build project -->

  <property name="src" location="src" />
  <property name="src.main" location="${src}/main/java" />
  <property name="src.test" location="${src}/test/java" />
  <property name="build" location="build" />
  <property name="build.main" location="${build}/main" />
  <property name="build.test" location="${build}/test" />
  <property name="dist" location="dist" />
  <property name="version">0.1</property>
  <property name="sourcepath" location="${main}/com/hal/stun" />
  <property name="test.reports" location="reports" />

  
  <target name="init">
    <tstamp />
    <mkdir dir="${build.main}" />
  </target>

  <target name="resolve" depends="install-ivy" description="retrieve dependencies with ivy">
    <ivy:cachepath pathid="test.path" conf="test" />
  </target>

  <target name="download-junit" depends="install-ivy" description="downloads junit">
    <ivy:retrieve conf="test" pattern="${build}/lib/[conf]/[artifact](-[classifier]).[ext]"/>
  </target>
  
  <target name="compile" depends="init" description="compile the source">
    <javac srcdir="${src.main}" destdir="${build.main}" debug="true" debuglevel="lines,vars,source" />
  </target>

  <target name="compile-tests" depends="resolve, download-junit, compile" description="compile tests">
    <echo>test path: ${toString:test.path}</echo>
    <echo>main classes path: "${build.main}"</echo>
    <echo>test classes path: "${build.test}"</echo>
    <mkdir dir="${build.test}" />
    <javac srcdir="${src.test}" destdir="${build.test}" includeantruntime="false" debug="true" debuglevel="lines,vars,source" >
      <classpath>
        <path refid="test.path" />
        <pathelement path="${build.main}" />
      </classpath>
    </javac>
  </target>

  <target name="test" depends="compile-tests" description="Downloads and compiles everything, then runs tests" >
    <antcall target="only-test" />
  </target>

  <target name="only-test" depends="resolve" description="Runs tests. Will fail unless tests have already been compiled">
    <mkdir dir="${test.reports}" />

    <junit printsummary="true" haltonerror="true" haltonfailure="true" showoutput="true">
      <classpath>
        <path refid="test.path" />
        <pathelement location="${build.main}" />
        <pathelement location="${build.test}" />
      </classpath>

      <formatter type="plain" />
      <batchtest fork="true" todir="${test.reports}" >
        <fileset dir="${src.test}" >
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="dist" depends="compile" description="generate the distribution">
    <mkdir dir="${dist}/jar" />

    <!-- Put everything in ${build} into the Stunner-${version}.jar file -->
    <jar jarfile="${dist}/jar/Stunner-${version}.jar" basedir="${build.main}">
      <manifest>
        <attribute name="Main-Class" value="com.hal.stun.StunServer" />
      </manifest>
    </jar>
  </target>

  <target name="build-and-test" depends="test, dist" />

  <target name="clean" description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}" />
    <delete dir="${dist}" />
  </target>
  
  <target name="clean-ivy" description="clean up ivy">
    <delete dir="${ivy.jar.dir}" />
  </target>

  <target name="clean-reports" description="clean up test reports">
    <delete dir="${test.reports}" />
  </target>

  <target name="clean-all" depends="clean, clean-reports, clean-ivy" description="clean build, dist, dependencies and ivy">
    <echo message="deleting everything but source" />
  </target>

</project>
